// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcapi.proto

/*
Package cfgrpcapi is a generated protocol buffer package.

It is generated from these files:
	rpcapi.proto

It has these top-level messages:
	Shell
	Result
	ExecuteRequest
	ExecuteReply
*/
package cfgrpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Shell struct {
	Cmd  string   `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	In   []byte   `protobuf:"bytes,3,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *Shell) Reset()                    { *m = Shell{} }
func (m *Shell) String() string            { return proto.CompactTextString(m) }
func (*Shell) ProtoMessage()               {}
func (*Shell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Shell) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Shell) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Shell) GetIn() []byte {
	if m != nil {
		return m.In
	}
	return nil
}

type Result struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type ExecuteRequest struct {
	Shells []*Shell `protobuf:"bytes,1,rep,name=shells" json:"shells,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecuteRequest) GetShells() []*Shell {
	if m != nil {
		return m.Shells
	}
	return nil
}

type ExecuteReply struct {
	Results []*Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ExecuteReply) Reset()                    { *m = ExecuteReply{} }
func (m *ExecuteReply) String() string            { return proto.CompactTextString(m) }
func (*ExecuteReply) ProtoMessage()               {}
func (*ExecuteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecuteReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Shell)(nil), "cfgrpcapi.Shell")
	proto.RegisterType((*Result)(nil), "cfgrpcapi.Result")
	proto.RegisterType((*ExecuteRequest)(nil), "cfgrpcapi.ExecuteRequest")
	proto.RegisterType((*ExecuteReply)(nil), "cfgrpcapi.ExecuteReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcApi service

type RpcApiClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error)
}

type rpcApiClient struct {
	cc *grpc.ClientConn
}

func NewRpcApiClient(cc *grpc.ClientConn) RpcApiClient {
	return &rpcApiClient{cc}
}

func (c *rpcApiClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error) {
	out := new(ExecuteReply)
	err := grpc.Invoke(ctx, "/cfgrpcapi.RpcApi/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcApi service

type RpcApiServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteReply, error)
}

func RegisterRpcApiServer(s *grpc.Server, srv RpcApiServer) {
	s.RegisterService(&_RpcApi_serviceDesc, srv)
}

func _RpcApi_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcApiServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfgrpcapi.RpcApi/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcApiServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cfgrpcapi.RpcApi",
	HandlerType: (*RpcApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _RpcApi_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcapi.proto",
}

func init() { proto.RegisterFile("rpcapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0xdd, 0x5d, 0x4d, 0xd9, 0x71, 0x29, 0x75, 0x0e, 0xba, 0x7a, 0x0a, 0x39, 0x05, 0x84,
	0x3d, 0xd4, 0x9b, 0x22, 0xe2, 0xc1, 0x83, 0xd7, 0xf1, 0x17, 0xd4, 0x18, 0xeb, 0x42, 0xec, 0x8e,
	0xf9, 0x00, 0xfb, 0xef, 0xa5, 0xe9, 0xb6, 0x54, 0xe8, 0x6d, 0x92, 0xc9, 0xf3, 0xbe, 0x0f, 0x81,
	0xc6, 0xb3, 0x59, 0x70, 0xdf, 0xb1, 0x1f, 0xe2, 0x80, 0xb5, 0xf9, 0x5c, 0x6e, 0x2f, 0xd4, 0x23,
	0x9c, 0xbd, 0x7d, 0x59, 0xe7, 0x70, 0x06, 0x95, 0xf9, 0xfe, 0x68, 0x0b, 0x59, 0xe8, 0x9a, 0x36,
	0x23, 0x22, 0x9c, 0x2e, 0xfc, 0x32, 0xb4, 0xa5, 0xac, 0x74, 0x4d, 0x79, 0xc6, 0x29, 0x94, 0xfd,
	0xaa, 0xad, 0x64, 0xa1, 0x1b, 0x2a, 0xfb, 0x95, 0x92, 0x20, 0xc8, 0x86, 0xe4, 0x22, 0x5e, 0x82,
	0x18, 0x52, 0xe4, 0x14, 0x73, 0x44, 0x43, 0xe3, 0x49, 0xdd, 0xc3, 0xf4, 0xe5, 0xd7, 0x9a, 0x14,
	0x2d, 0xd9, 0x9f, 0x64, 0x43, 0x44, 0x0d, 0x22, 0x6c, 0x2a, 0x43, 0x5b, 0xc8, 0x4a, 0x9f, 0xcf,
	0x67, 0xdd, 0x5e, 0xa7, 0xcb, 0x2e, 0x34, 0xee, 0xd5, 0x03, 0x34, 0x7b, 0x96, 0xdd, 0x1a, 0x6f,
	0x61, 0xe2, 0x73, 0xdb, 0x0e, 0xbd, 0x38, 0x40, 0xb7, 0x1e, 0xb4, 0x7b, 0x31, 0x7f, 0x05, 0x41,
	0x6c, 0x9e, 0xb9, 0xc7, 0x27, 0x98, 0x8c, 0x31, 0x78, 0x7d, 0x00, 0xfc, 0xd7, 0xba, 0xb9, 0x3a,
	0xb6, 0x62, 0xb7, 0x56, 0x27, 0xef, 0x22, 0x7f, 0xdb, 0xdd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x3b, 0xd6, 0x44, 0x26, 0x46, 0x01, 0x00, 0x00,
}
